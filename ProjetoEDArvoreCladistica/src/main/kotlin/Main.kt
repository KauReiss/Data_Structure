import java.util.Scanner

fun main() {
    val scanner = Scanner(System.`in`)
    println("üåø Bem-vindo √† √Årvore Clad√≠stica!")
    print("üêæ Digite a esp√©cie raiz: ")
    val especieRaiz = scanner.nextLine()

    var tree = ArvoreCladistica(NoArvore(especieRaiz, ""))  // Cria√ß√£o da √°rvore

    while (true) {
        println("\nüìú MENU:")
        println("1Ô∏è‚É£ Inserir Esp√©cie")
        println("2Ô∏è‚É£ Visualizar √Årvore Completa")
        println("3Ô∏è‚É£ Buscar Esp√©cie")
        println("4Ô∏è‚É£ Destalhes de Esp√©cie")
        println("5Ô∏è‚É£ Remo√ß√£o de Esp√©cie")
        println("6Ô∏è‚É£ Visualizar rela√ß√£o filogen√©tica")
        println("7Ô∏è‚É£ Sair")

        print("üëâ Escolha uma op√ß√£o: ")
        when (scanner.nextInt()) {
            1 -> {
                scanner.nextLine() // Limpar buffer
                print("üîπ Esp√©cie ancestral: ")
                val pai = scanner.nextLine()
                if (tree.buscarEspecie(tree.raiz, pai) == null) {    // Verifica se a esp√©cie existe na √°rvore
                    println("‚ùå O Ancestral '$pai' n√£o foi encontrado.")
                } else {
                    print("üîπ Nova esp√©cie: ")
                    val novaEspecie = scanner.nextLine()
                    tree.inserirEspecie(pai, novaEspecie)
                }
                }

            2 -> {
                println("\nüå≥ √Årvore Clad√≠stica:")
                tree.imprimirArvore(tree.raiz)
            }
            3 -> {
                scanner.nextLine() // Limpar buffer
                print("üîç Buscar esp√©cie: ")
                val search = scanner.nextLine()
                val found = tree.buscarEspecie(tree.raiz, search)
                if (found != null) {  // Verifica se a busca encontrou a esp√©cie informada
                    println("‚úÖ A Esp√©cie '$search' foi encontrada!")
                } else {
                    println("‚ùå A Esp√©cie '$search' n√£o foi encontrada.")
                }
            }
            4 -> {
                scanner.nextLine() // Limpar buffer
                print("üêæ Detalhes da esp√©cie: ")
                val search = scanner.nextLine()
                val found = tree.buscarEspecie(tree.raiz, search)
                if (found != null) {  // Verifica se a busca encontrou a esp√©cie informada
                    if (found.ancestral != "") {  // Verifica se n√£o √© a esp√©cie raiz
                        if (found.temDescendentes()){
                            val ancestral = found.ancestral
                            print("‚úÖ A Esp√©cie '$search' tem como ancestral '$ancestral' e descendentes.")
                            found.imprimirDescendentes()
                        } else {
                            val ancestral = found.ancestral
                            println("‚úÖ A Esp√©cie '$search' tem como ancestral '$ancestral' e n√£o tem descendentes.")
                        }
                    } else {
                        println("‚úÖ A Esp√©cie '$search' √© a raiz da √°rvore.")
                    }
                } else {
                    println("‚ùå A Esp√©cie '$search' n√£o foi encontrada.")
                }
            }
            5 -> {
                scanner.nextLine() // Limpar buffer
                print("‚ùå Remover esp√©cie: ")
                val remover = scanner.nextLine()
                if (tree.removerEspecies(remover)) {  // Se a fun√ß√£o retornar true √© porque a esp√©cie que ser√° removida √© a raiz
                    print("üêæ Qual esp√©cie ser√° a nova raiz: ")
                    val novaRaiz = scanner.nextLine()
                    tree = ArvoreCladistica(NoArvore(novaRaiz, ""))  // Cria√ß√£o de uma nova √°rvore com a nova esp√©cie raiz
                }
            }

            6 -> {
                scanner.nextLine() // Limpar buffer
                print("üêæ Filogen√©tica de qual esp√©cie: ")
                val especie = scanner.nextLine()
                tree.imprimirFilogenetica(tree.raiz, especie)  // Imprime a esp√©cie e seus descendentes
            }

            7 -> {
                println("üö™ Saindo...")
                break
            }
            else -> println("‚ö†Ô∏è Op√ß√£o inv√°lida! Tente novamente.")
        }
    }
    scanner.close()
}